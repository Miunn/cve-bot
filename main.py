from dotenv import load_dotenv
from os import getenv
import discord
from discord import app_commands

import requests

from cveFetch import CVEFetch
from model.cve import CVE
from utils import DiscordUtils

if not load_dotenv():
    print("Can't load dotenv")
    exit(0)

GUILD_ID = getenv("guild")
guild = discord.Object(id=GUILD_ID)

intents = discord.Intents.default()
intents.message_content = True

client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

@tree.command(
    name="hello",
    guild=guild
)
async def hello(interaction: discord.Interaction):
    await interaction.response.send_message("```Hello```")

@tree.command(
    name="last-cves",
    guild=guild
)
async def lastCves(interaction: discord.Interaction):
    data = CVEFetch.get_last_cves()
    
    embed = DiscordUtils.get_default_embed("20 Last CVEs", interaction)
    
    embed.description = ""
    for cve in data[:20]:
        embed.description += "`" +cve.id_ + "`" + "\t-\t" + cve.published.strftime("%d %b %H:%M:%S") + "\n"
    
    await interaction.response.send_message(embed=embed)
    
@tree.command(
    name="cve",
    guild=guild
)
async def cve(interaction: discord.Interaction, id_: str):
    cveData: CVE = CVEFetch.get_cve(id_)
    
    embed: discord.Embed = DiscordUtils.get_default_embed(cveData.id_, interaction)
    
    if requests.get(f"https://nvd.nist.gov/vuln/detail/{cveData.id_}").status_code == 200:
        embed.url = f"https://nvd.nist.gov/vuln/detail/{cveData.id_}"
    
    vuln_conf_payload = '\n'.join(['`'+vuln_conf['title']+'`' for vuln_conf in cveData.vulnerable_configuration])
    references_payload = '\n'.join(cveData.references)
    
    embed.description = cveData.summary
    
    embed.add_field(name="Modifed", value=cveData.modified.strftime("%d %b %Y %H:%M:%S"))
    embed.add_field(name="Published", value=cveData.published.strftime("%d %b %Y %H:%M:%S"))
    embed.add_field(name="Last modified", value=cveData.last_modified.strftime("%d %b %Y %H:%M:%S"))
    embed.add_field(name="CVSS", value=cveData.cvss)
    embed.add_field(name="CWE", value=cveData.cwe)
    embed.add_field(name="Acess", value=f"Authentication: {cveData.access['authentication']}\nComplexity: {cveData.access['complexity']}\nVector: {cveData.access['vector']}")

    embed.add_field(name="Vulnerability configuration", value=vuln_conf_payload, inline=False)
    embed.add_field(name="References", value=references_payload, inline=False)

    await interaction.response.send_message(embed=embed)

@client.event
async def on_ready():
    await tree.sync(guild=guild)
    print(f"Connected {client.user}")

client.run(getenv("token"))